import os, strformat, base64, nimcrypto, zippy

func toByteSeq*(str: string): seq[byte] {.inline.} =
    # Converts a string to the corresponding byte sequence 
    @(str.toOpenArrayByte(0, str.high))

# Function to convert byte sequence back to string  
proc toString(bytes: seq[byte]): string {.inline.} =
  result = newString(bytes.len)
  copyMem(addr result[0], unsafeAddr bytes[0], bytes.len)

# Function to prompt for user input
proc prompt(message: string): string =
  echo message
  result = readLine(stdin)

# Main function that processes the decryption
proc processDecryption() =
  let
    password = prompt("Enter the password:")
    inFile = prompt("Enter the path to the input file:")
    outFile = changeFileExt(inFile, ".exe") # Change output file extension to .dec

  try:
    # Read and decode the base64 encoded input file
    var inFileContents = readFile(inFile)
    echo fmt"Read input file: {inFileContents}"
    var encrypted = decode(inFileContents)
    # echo fmt"Decoded base64 input: {encrypted}"

    var dctx: CTR[aes256]
    var key: array[aes256.sizeKey, byte]
    var iv: array[aes256.sizeBlock, byte]
    var decrypted = newSeq[byte](len(encrypted))
    echo fmt"len plaintext:{len(encrypted)}"
    # echo fmt"plaintext:{encrypted}"

    # Use the same static IV as during encryption
    iv = [byte 183, 142, 238, 156, 42, 43, 248, 100, 125, 249, 192, 254, 217, 222, 133, 149]

    # Derive the key again using the password
    var expandedKey = sha256.digest(password)
    copyMem(addr key[0], addr expandedKey.data[0], len(expandedKey.data))
    # echo fmt"Derived key from password: {expandedKey}"

    echo fmt"[*] Decrypting {inFile} using the provided password."

    # Initialize the decryption context and decrypt
    dctx.init(key, iv)
    dctx.decrypt(encrypted.toOpenArrayByte(0, encrypted.high), decrypted)
    dctx.clear()
    
    # rewite the file contents
    inFileContents = toString(decrypted)
    # echo fmt"Decrypted data: {inFileContents}"

    # Decompress the decrypted data
    let decryptedStr = uncompress(decrypted, dfGzip)
    echo "Decompressed data"

    echo fmt"[*] Writing decrypted data to: {outFile}"
    
    # Write the decrypted data to the output file
    writeFile(outFile, decryptedStr)

  except Exception as e:
    echo "Failed to process file: ", e.msg
  
# Entry point
when isMainModule:
  processDecryption()
